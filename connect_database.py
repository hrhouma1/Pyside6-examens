#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import mysql.connector
from mysql.connector import Error

def test_database_connection():
    """Teste la connexion √† la base de donn√©es MySQL"""
    
    # Configuration de la base de donn√©es
    db_config = {
        'host': 'localhost',
        'user': 'root',
        'password': 'root',  # Mot de passe MySQL
        'port': 3306
    }
    
    connection = None
    
    try:
        print("üîÑ Tentative de connexion √† MySQL...")
        
        # Connexion √† MySQL (sans sp√©cifier de base de donn√©es)
        connection = mysql.connector.connect(**db_config)
        
        if connection.is_connected():
            db_info = connection.get_server_info()
            print(f"‚úÖ Connexion r√©ussie √† MySQL Server version {db_info}")
            
            cursor = connection.cursor()
            cursor.execute("SELECT DATABASE();")
            record = cursor.fetchone()
            print(f"üìä Base de donn√©es actuelle: {record}")
            
            # Cr√©er la base de donn√©es si elle n'existe pas
            cursor.execute("CREATE DATABASE IF NOT EXISTS messages_app CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci")
            print("‚úÖ Base de donn√©es 'messages_app' cr√©√©e ou v√©rifi√©e")
            
            # Utiliser la base de donn√©es
            cursor.execute("USE messages_app")
            print("‚úÖ Utilisation de la base de donn√©es 'messages_app'")
            
            # Cr√©er la table si elle n'existe pas
            create_table_query = """
            CREATE TABLE IF NOT EXISTS messages (
                id INT AUTO_INCREMENT PRIMARY KEY,
                texte VARCHAR(500) NOT NULL,
                date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                INDEX idx_date_creation (date_creation)
            )
            """
            cursor.execute(create_table_query)
            print("‚úÖ Table 'messages' cr√©√©e ou v√©rifi√©e")
            
            # V√©rifier la structure de la table
            cursor.execute("DESCRIBE messages")
            columns = cursor.fetchall()
            print("\nüìã Structure de la table 'messages':")
            for column in columns:
                print(f"  - {column[0]}: {column[1]}")
            
            # Compter les messages existants
            cursor.execute("SELECT COUNT(*) FROM messages")
            count = cursor.fetchone()[0]
            print(f"\nüìä Nombre de messages existants: {count}")
            
            cursor.close()
            print("\nüéâ Test de connexion termin√© avec succ√®s!")
            
    except Error as e:
        print(f"‚ùå Erreur lors de la connexion √† MySQL: {e}")
        return False
        
    finally:
        if connection and connection.is_connected():
            connection.close()
            print("üîí Connexion MySQL ferm√©e")
    
    return True

def main():
    """Fonction principale"""
    print("=" * 50)
    print("üîç TEST DE CONNEXION √Ä LA BASE DE DONN√âES")
    print("=" * 50)
    
    success = test_database_connection()
    
    if success:
        print("\n‚úÖ Configuration de la base de donn√©es OK!")
        print("üìù Vous pouvez maintenant ex√©cuter:")
        print("   python add_mysql_test_data.py")
        print("   python main.py")
    else:
        print("\n‚ùå Probl√®me de configuration d√©tect√©")
        print("üîß V√©rifiez:")
        print("   - MySQL Server est d√©marr√©")
        print("   - Les param√®tres de connexion sont corrects")
        print("   - L'utilisateur a les privil√®ges n√©cessaires")

if __name__ == "__main__":
    main() 