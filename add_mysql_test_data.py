#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import mysql.connector
from mysql.connector import Error
from datetime import datetime

def add_test_data():
    """Ajoute des donn√©es de test dans la table messages"""
    
    # Configuration de la base de donn√©es
    db_config = {
        'host': 'localhost',
        'user': 'root',
        'password': 'root',  # Mot de passe MySQL
        'database': 'messages_app',
        'port': 3306
    }
    
    connection = None
    
    # Donn√©es de test √† ins√©rer
    test_messages = [
        "Bonjour, ceci est un message de test!",
        "Test de l'application PyQt6/PySide6",
        "Insertion automatique de donn√©es de test",
        "Fonctionnalit√© de base de donn√©es op√©rationnelle",
        "Message avec accents: √©√†√®√π√ß",
        "Test avec des caract√®res sp√©ciaux: @#$%^&*()",
        "Message plus long pour tester la capacit√© de stockage et la gestion des textes de diff√©rentes longueurs",
        "üéâ Test avec √©mojis et caract√®res Unicode üöÄ",
        "Test final - Donn√©es ins√©r√©es avec succ√®s!"
    ]
    
    try:
        print("üîÑ Connexion √† la base de donn√©es...")
        connection = mysql.connector.connect(**db_config)
        
        if connection.is_connected():
            print("‚úÖ Connexion r√©ussie")
            
            cursor = connection.cursor()
            
            # V√©rifier si des donn√©es existent d√©j√†
            cursor.execute("SELECT COUNT(*) FROM messages")
            existing_count = cursor.fetchone()[0]
            print(f"üìä Messages existants: {existing_count}")
            
            # Ins√©rer les donn√©es de test
            insert_query = "INSERT INTO messages (texte) VALUES (%s)"
            
            print("üîÑ Insertion des donn√©es de test...")
            for i, message in enumerate(test_messages, 1):
                cursor.execute(insert_query, (message,))
                print(f"  [{i}/{len(test_messages)}] ‚úÖ {message[:50]}...")
            
            # Confirmer les modifications
            connection.commit()
            print(f"‚úÖ {len(test_messages)} messages de test ins√©r√©s avec succ√®s!")
            
            # V√©rifier l'insertion
            cursor.execute("SELECT COUNT(*) FROM messages")
            new_count = cursor.fetchone()[0]
            print(f"üìä Total de messages apr√®s insertion: {new_count}")
            
            # Afficher les derniers messages
            cursor.execute("SELECT id, texte, date_creation FROM messages ORDER BY date_creation DESC LIMIT 5")
            latest_messages = cursor.fetchall()
            
            print("\nüìã Les 5 derniers messages:")
            for msg in latest_messages:
                print(f"  ID: {msg[0]} | {msg[2]} | {msg[1][:50]}...")
            
            cursor.close()
            
    except Error as e:
        print(f"‚ùå Erreur lors de l'ajout des donn√©es: {e}")
        return False
        
    finally:
        if connection and connection.is_connected():
            connection.close()
            print("üîí Connexion ferm√©e")
    
    return True

def clear_test_data():
    """Supprime toutes les donn√©es de test (optionnel)"""
    
    db_config = {
        'host': 'localhost',
        'user': 'root',
        'password': 'root',  # Mot de passe MySQL
        'database': 'messages_app',
        'port': 3306
    }
    
    try:
        connection = mysql.connector.connect(**db_config)
        cursor = connection.cursor()
        
        # Compter les messages avant suppression
        cursor.execute("SELECT COUNT(*) FROM messages")
        count_before = cursor.fetchone()[0]
        
        # Supprimer tous les messages
        cursor.execute("DELETE FROM messages")
        
        # R√©initialiser l'auto-increment
        cursor.execute("ALTER TABLE messages AUTO_INCREMENT = 1")
        
        connection.commit()
        
        print(f"üóëÔ∏è {count_before} messages supprim√©s")
        print("‚úÖ Table vid√©e et auto-increment r√©initialis√©")
        
        cursor.close()
        connection.close()
        
    except Error as e:
        print(f"‚ùå Erreur lors de la suppression: {e}")

def main():
    """Fonction principale"""
    print("=" * 60)
    print("üìù AJOUT DE DONN√âES DE TEST - APPLICATION MESSAGES")
    print("=" * 60)
    
    print("Que souhaitez-vous faire?")
    print("1. Ajouter des donn√©es de test")
    print("2. Supprimer toutes les donn√©es")
    print("3. Ajouter des donn√©es de test (sans demander)")
    
    try:
        choice = input("\nVotre choix (1-3, ou Entr√©e pour option 3): ").strip()
        
        if choice == "2":
            confirm = input("‚ö†Ô∏è √ätes-vous s√ªr de vouloir supprimer toutes les donn√©es? (oui/non): ")
            if confirm.lower() in ['oui', 'o', 'yes', 'y']:
                clear_test_data()
            else:
                print("‚ùå Suppression annul√©e")
                
        else:  # choice == "1" or choice == "3" or default
            success = add_test_data()
            
            if success:
                print("\nüéâ Donn√©es de test ajout√©es avec succ√®s!")
                print("üì± Vous pouvez maintenant lancer l'application:")
                print("   python main.py")
            else:
                print("\n‚ùå √âchec de l'ajout des donn√©es")
                print("üîß V√©rifiez la connexion √† la base de donn√©es")
                
    except KeyboardInterrupt:
        print("\n‚ùå Op√©ration annul√©e par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")

if __name__ == "__main__":
    main() 