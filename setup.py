#!/usr/bin/env python3
"""
Script d'installation et de lancement pour l'examen PyQt6
Automatise la configuration de l'environnement et le lancement de l'application
"""

import subprocess
import sys
import os
import platform

def run_command(command, description=""):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"üîÑ {description}")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - Succ√®s")
            if result.stdout.strip():
                print(f"   {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå {description} - √âchec")
            print(f"   Erreur: {result.stderr.strip()}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - Exception: {e}")
        return False

def check_python_version():
    """V√©rifie la version de Python"""
    version = sys.version_info
    print(f"üêç Version Python d√©tect√©e: {version.major}.{version.minor}.{version.micro}")
    
    if version.major >= 3 and version.minor >= 8:
        print("‚úÖ Version Python compatible")
        return True
    else:
        print("‚ùå Version Python trop ancienne (minimum 3.8 requis)")
        return False

def setup_environment():
    """Configure l'environnement virtuel"""
    print("\n" + "="*50)
    print("üîß CONFIGURATION DE L'ENVIRONNEMENT")
    print("="*50)
    
    # D√©tecter l'OS
    system = platform.system()
    
    # Cr√©er l'environnement virtuel
    if not os.path.exists("env"):
        if not run_command(f"{sys.executable} -m venv env", "Cr√©ation de l'environnement virtuel"):
            return False
    else:
        print("‚úÖ Environnement virtuel d√©j√† existant")
    
    # Commandes d'activation selon l'OS
    if system == "Windows":
        pip_cmd = ".\\env\\Scripts\\pip"
        python_cmd = ".\\env\\Scripts\\python"
    else:
        pip_cmd = "./env/bin/pip"
        python_cmd = "./env/bin/python"
    
    # Installer les d√©pendances
    if not run_command(f"{pip_cmd} install -r requirements.txt", "Installation des d√©pendances"):
        return False
    
    return True, python_cmd

def launch_application(python_cmd):
    """Lance l'application"""
    print("\n" + "="*50)
    print("üöÄ LANCEMENT DE L'APPLICATION")
    print("="*50)
    
    # Convertir le fichier .ui si n√©cessaire
    if not os.path.exists("interface_ui.py"):
        run_command(f"{python_cmd} convert_ui.py", "Conversion du fichier .ui")
    
    # Lancer l'application
    print("üì± D√©marrage de l'application Examen PyQt6...")
    print("   (Fermez la fen√™tre de l'application pour revenir au terminal)")
    
    try:
        subprocess.run(f"{python_cmd} main.py", shell=True)
        print("‚úÖ Application ferm√©e normalement")
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Application interrompue par l'utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement: {e}")

def main():
    """Fonction principale"""
    print("üéì EXAMEN PYQT6 - CONFIGURATION ET LANCEMENT")
    print("="*60)
    
    # V√©rifier Python
    if not check_python_version():
        sys.exit(1)
    
    # Configurer l'environnement
    result = setup_environment()
    if isinstance(result, tuple):
        success, python_cmd = result
        if not success:
            sys.exit(1)
    else:
        sys.exit(1)
    
    # Lancer l'application
    launch_application(python_cmd)
    
    print("\nüéâ Session termin√©e. Merci d'avoir utilis√© l'application d'examen!")

if __name__ == "__main__":
    main() 